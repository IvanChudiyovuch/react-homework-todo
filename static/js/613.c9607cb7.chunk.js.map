{"version":3,"file":"static/js/613.c9607cb7.chunk.js","mappings":"qOAEaA,EAAUC,EAAAA,EAAAA,IAAH,qJASPC,EAAOD,EAAAA,EAAAA,EAAH,+DAKJE,EAAMF,EAAAA,EAAAA,OAAH,wUAMG,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,oBClBPC,EAAO,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACnBC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,UAACX,EAAD,YACE,SAACE,EAAD,UAAOO,KACP,SAACN,EAAD,CAAKS,KAAK,SAASC,QALF,kBAAMH,GAASI,EAAAA,EAAAA,IAAWN,GAA1B,EAKjB,sBAKL,ECjBYO,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,EAIrBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAhB,ECFtBC,EAAOpB,EAAAA,EAAAA,GAAH,8ICGJqB,EAAW,WACtB,IAAML,GAAQM,EAAAA,EAAAA,IAAYJ,GAE1B,OACE,SAACE,EAAD,UACGJ,EAAMO,KAAI,gBAAGhB,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACT,yBACE,SAACF,EAAD,CAAMC,GAAIA,EAAIC,KAAMA,KADbD,EADA,KAOhB,ECfYiB,EAAOxB,EAAAA,EAAAA,KAAH,kGAGR,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACS,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGPoB,EAAQzB,EAAAA,EAAAA,MAAH,qNAEL,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEK,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAOPqB,EAAS1B,EAAAA,EAAAA,OAAH,4TAQR,SAAAG,GAAC,OAAIA,EAAEC,MAAMuB,OAAOC,KAAnB,ICxBCC,EAAa,WACxB,IAAMpB,GAAWC,EAAAA,EAAAA,MAcjB,OACE,UAACc,EAAD,CAAMM,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACT1B,EAAOyB,EAAKE,SAAS3B,KAAK4B,MAChC,GAAa,KAAT5B,EAGF,OAFAC,GAAS4B,EAAAA,EAAAA,IAAQ7B,SACjByB,EAAKK,QAGPC,MAAM,wHACP,EAGC,WACE,SAACd,EAAD,CAAOe,KAAK,UACZ,SAACd,EAAD,CAAQf,KAAK,SAAb,wBAGL,EClBc,SAAS8B,IACtB,IAAMhC,GAAWC,EAAAA,EAAAA,MACXgC,GAAYpB,EAAAA,EAAAA,IAAYR,GAM9B,OAJA6B,EAAAA,EAAAA,YAAU,WACRlC,GAASmC,EAAAA,EAAAA,MACV,GAAE,CAACnC,KAGF,iCACE,SAACoB,EAAD,KACA,yBAAMa,GAAa,4BACnB,SAACrB,EAAD,MAGL,C","sources":["components/Task/Task.styled.jsx","components/Task/Task.jsx","redux/tasks/TascsSelectors.js","components/TaskList/TaskList.styled.jsx","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.styled.jsx","components/TaskEditor/TaskEditor.jsx","pages/Tasks.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  padding: 4px;\n  border: 1px solid #2a2a2a;\n  border-radius: 4px;\n`;\n\nexport const Text = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n`;\n\nexport const Btn = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  margin-left: auto;\n  border-radius: ${p => p.theme.space[2]}px;\n  padding: 8px 12px;\n  background-color: #3f51b5;\n  color: #fff;\n\n  &:active {\n    background-color: #bdbdbd;\n  }\n\n  &:hover,\n  :focus {\n    background-color: #303f9f;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { Wrapper, Text, Btn } from './Task.styled';\nimport { deleteTask } from '../../redux/tasks/TascsOperations';\n\nexport const Task = ({ id, text }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteTask(id));\n\n  return (\n    <Wrapper>\n      <Text>{text}</Text>\n      <Btn type=\"button\" onClick={handleDelete}>\n        Delete\n      </Btn>\n    </Wrapper>\n  );\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 12px;\n`;\n","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport { selectAllTasks } from '../../redux/tasks/TascsSelectors';\nimport { List } from './TaskList.styled';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <List>\n      {tasks.map(({ id, text }) => (\n        <li key={id}>\n          <Task id={id} text={text} />\n        </li>\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  width: 100%;\n  gap: ${p => p.theme.space[2]}px;\n  margin-bottom: ${p => p.theme.space[4]}px;\n`;\n\nexport const Input = styled.input`\n  flex-grow: 1;\n  padding: ${p => p.theme.space[3]}px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: ${p => p.theme.space[2]}px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: ${p => p.theme.colors.white};\n\n  :active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n\n  :hover,\n  :focus {\n    background-color: #303f9f;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/tasks/TascsOperations';\nimport { Form, Input, Button } from './TaskEditor.styled';\n\nexport const TaskEditor = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Заполни текст заметки.');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"text\" />\n      <Button type=\"submit\">Add todo</Button>\n    </Form>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from '../redux/tasks/TascsOperations';\nimport { selectLoading } from '../redux/tasks/TascsSelectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <TaskEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n    </>\n  );\n}\n"],"names":["Wrapper","styled","Text","Btn","p","theme","space","Task","id","text","dispatch","useDispatch","type","onClick","deleteTask","selectLoading","state","tasks","loading","selectAllTasks","items","List","TaskList","useSelector","map","Form","Input","Button","colors","white","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","Tasks","isLoading","useEffect","fetchTasks"],"sourceRoot":""}