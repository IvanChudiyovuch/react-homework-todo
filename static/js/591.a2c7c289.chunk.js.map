{"version":3,"file":"static/js/591.a2c7c289.chunk.js","mappings":"mPAEaA,EAAUC,EAAAA,EAAAA,IAAH,sGAGX,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACG,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGDC,EAAOJ,EAAAA,EAAAA,EAAH,yCAIJK,EAAML,EAAAA,EAAAA,OAAH,qXAuBHM,EAAWN,EAAAA,EAAAA,MAAH,6E,mBC/BRO,EAAO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACfC,GAAWC,EAAAA,EAAAA,MAIjB,OACE,UAACX,EAAD,YACE,SAACO,EAAD,CAAUK,KAAK,WAAWC,QAASJ,EAAKK,aACxC,SAACT,EAAD,UAAOI,EAAKM,QACZ,SAACT,EAAD,CAAKU,QANY,kBAAMN,GAASO,EAAAA,EAAAA,IAAWR,EAAKS,IAA/B,EAMjB,UACE,SAAC,MAAD,CAASC,KAAM,SAItB,ECnBYC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,EAIrBC,EAAiB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,KAAhB,ECFtBC,EAAOzB,EAAAA,EAAAA,GAAH,0EAMJ0B,EAAW1B,EAAAA,EAAAA,GAAH,0DCHR2B,EAAW,WACtB,IAAMN,GAAQO,EAAAA,EAAAA,IAAYL,GAE1B,OACE,SAACE,EAAD,UACGJ,EAAMQ,KAAI,SAAArB,GAAI,OACb,SAACkB,EAAD,WACE,SAACnB,EAAD,CAAMC,KAAMA,KADCA,EAAKS,GADP,KAOpB,ECfYa,EAAO9B,EAAAA,EAAAA,KAAH,kGAGR,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACS,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGP4B,EAAQ/B,EAAAA,EAAAA,MAAH,qNAEL,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEK,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAOP6B,EAAShC,EAAAA,EAAAA,OAAH,4TAQR,SAAAC,GAAC,OAAIA,EAAEC,MAAM+B,OAAOC,KAAnB,ICxBCC,EAAa,WACxB,IAAM1B,GAAWC,EAAAA,EAAAA,MAcjB,OACE,UAACoB,EAAD,CAAMM,SAba,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACT1B,EAAOyB,EAAKE,SAAS3B,KAAK4B,MAChC,GAAa,KAAT5B,EAGF,OAFAL,GAASkC,EAAAA,EAAAA,IAAQ7B,SACjByB,EAAKK,QAGPC,MAAM,wHACP,EAGC,WACE,SAACd,EAAD,CAAOe,KAAK,UACZ,SAACd,EAAD,CAAQrB,KAAK,SAAb,wBAGL,EClBc,SAASoC,IACtB,IAAMtC,GAAWC,EAAAA,EAAAA,MACXsC,GAAYpB,EAAAA,EAAAA,IAAYT,GAM9B,OAJA8B,EAAAA,EAAAA,YAAU,WACRxC,GAASyC,EAAAA,EAAAA,MACV,GAAE,CAACzC,KAGF,iCACE,SAAC0B,EAAD,KACA,yBAAMa,GAAa,4BACnB,SAACrB,EAAD,MAGL,C","sources":["components/Task/Task.styled.jsx","components/Task/Task.jsx","redux/Tasks/selectors.js","components/TaskList/TaskList.styled.jsx","components/TaskList/TaskList.jsx","components/TaskEditor/TaskEditor.styled.jsx","components/TaskEditor/TaskEditor.jsx","pages/Tasks.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  gap: ${p => p.theme.space[4]}px;\n  padding: ${p => p.theme.space[3]}px 0;\n`;\n\nexport const Text = styled.p`\n  flex-grow: 1;\n`;\n\nexport const Btn = styled.button`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  margin: 0;\n  border: none;\n  border-radius: 4px;\n  background-color: transparent;\n  cursor: pointer;\n  color: #f44336;\n\n  &:active {\n    background-color: #bdbdbd;\n  }\n\n  :hover {\n    background-color: #e2e5e8;\n  }\n`;\n\nexport const Checkbox = styled.input`\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n`;\n","import { useDispatch } from 'react-redux';\nimport { MdClose } from 'react-icons/md';\nimport { Wrapper, Text, Btn, Checkbox } from './Task.styled';\nimport { deleteTask } from '../../redux/Tasks/operations';\n\nexport const Task = ({ task }) => {\n  const dispatch = useDispatch();\n\n  const handleDelete = () => dispatch(deleteTask(task.id));\n\n  return (\n    <Wrapper>\n      <Checkbox type=\"checkbox\" checked={task.completed} />\n      <Text>{task.text}</Text>\n      <Btn onClick={handleDelete}>\n        <MdClose size={24} />\n      </Btn>\n    </Wrapper>\n  );\n};\n","export const selectLoading = state => state.tasks.loading;\n\nexport const selectFilter = state => state.tasks.filter;\n\nexport const selectAllTasks = state => state.tasks.items;\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ListItem = styled.li`\n  border-top: 1px solid #2f2f37;\n`;\n","import { useSelector } from 'react-redux';\nimport { Task } from '../Task/Task';\nimport { selectAllTasks } from '../../redux/Tasks/selectors';\nimport { List, ListItem } from './TaskList.styled';\n\nexport const TaskList = () => {\n  const tasks = useSelector(selectAllTasks);\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <ListItem key={task.id}>\n          <Task task={task} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  width: 100%;\n  gap: ${p => p.theme.space[2]}px;\n  margin-bottom: ${p => p.theme.space[4]}px;\n`;\n\nexport const Input = styled.input`\n  flex-grow: 1;\n  padding: ${p => p.theme.space[3]}px;\n  border: 1px solid rgba(33, 33, 33, 0.2);\n  border-radius: ${p => p.theme.space[2]}px;\n  font: inherit;\n  line-height: 16px;\n  letter-spacing: 0.01em;\n  resize: none;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  font: inherit;\n  cursor: pointer;\n  outline: none;\n  padding: 0 8px;\n  border-radius: 4px;\n  background-color: #3f51b5;\n  color: ${p => p.theme.colors.white};\n\n  :active {\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.15);\n  }\n\n  :hover,\n  :focus {\n    background-color: #303f9f;\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addTask } from '../../redux/Tasks/operations';\nimport { Form, Input, Button } from './TaskEditor.styled';\n\nexport const TaskEditor = () => {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    const text = form.elements.text.value;\n    if (text !== '') {\n      dispatch(addTask(text));\n      form.reset();\n      return;\n    }\n    alert('Заполни текст заметки.');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Input name=\"text\" />\n      <Button type=\"submit\">Add todo</Button>\n    </Form>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { TaskList } from 'components/TaskList/TaskList';\nimport { TaskEditor } from 'components/TaskEditor/TaskEditor';\nimport { fetchTasks } from '../redux/Tasks/operations';\nimport { selectLoading } from '../redux/Tasks/selectors';\n\nexport default function Tasks() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchTasks());\n  }, [dispatch]);\n\n  return (\n    <>\n      <TaskEditor />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <TaskList />\n    </>\n  );\n}\n"],"names":["Wrapper","styled","p","theme","space","Text","Btn","Checkbox","Task","task","dispatch","useDispatch","type","checked","completed","text","onClick","deleteTask","id","size","selectLoading","state","tasks","loading","selectAllTasks","items","List","ListItem","TaskList","useSelector","map","Form","Input","Button","colors","white","TaskEditor","onSubmit","e","preventDefault","form","currentTarget","elements","value","addTask","reset","alert","name","Tasks","isLoading","useEffect","fetchTasks"],"sourceRoot":""}